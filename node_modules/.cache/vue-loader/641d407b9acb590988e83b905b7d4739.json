{"remainingRequest":"/Projets/vuejs-project-dod/node_modules/vue-loader/lib/index.js??vue-loader-options!/Projets/vuejs-project-dod/src/components/Auth.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Projets/vuejs-project-dod/src/components/Auth.vue","mtime":1615118652316},{"path":"/Projets/vuejs-project-dod/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Projets/vuejs-project-dod/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Projets/vuejs-project-dod/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Projets/vuejs-project-dod/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCB7IHJlcXVpcmVkLCBlbWFpbCB9IGZyb20gJ3ZlZS12YWxpZGF0ZS9kaXN0L3J1bGVzJwppbXBvcnQgeyBleHRlbmQsIFZhbGlkYXRpb25PYnNlcnZlciwgVmFsaWRhdGlvblByb3ZpZGVyLCBzZXRJbnRlcmFjdGlvbk1vZGUgfSBmcm9tICd2ZWUtdmFsaWRhdGUnCgpzZXRJbnRlcmFjdGlvbk1vZGUoJ2VhZ2VyJykKCmV4dGVuZCgncmVxdWlyZWQnLCB7CiAgLi4ucmVxdWlyZWQsCiAgbWVzc2FnZTogJ3tfZmllbGRffSBjYW4gbm90IGJlIGVtcHR5JywKfSkKCmV4dGVuZCgnZW1haWwnLCB7CiAgLi4uZW1haWwsCiAgbWVzc2FnZTogJ0VtYWlsIG11c3QgYmUgdmFsaWQnLAp9KQoKZXhwb3J0IGRlZmF1bHQgewogIGNvbXBvbmVudHM6IHsKICAgIFZhbGlkYXRpb25Qcm92aWRlciwKICAgIFZhbGlkYXRpb25PYnNlcnZlciwKICB9LAogIGRhdGE6ICgpID0+ICh7CiAgICBwYXNzd29yZDogJycsCiAgICBlbWFpbDogJycsCiAgICBzZWxlY3Q6IG51bGwsCiAgICBlcnJvcnM6IG51bGwsCiAgfSksCgogIG1ldGhvZHM6IHsKICAgIHN1Ym1pdCAoKSB7CiAgICAgIHRoaXMuJHJlZnMub2JzZXJ2ZXIudmFsaWRhdGUoKTsKICAgICAgY29uc3QgZW1haWxJbnB1dCA9IHRoaXMuZW1haWw7CiAgICAgIGNvbnN0IHBhc3N3b3JkSW5wdXQgPSB0aGlzLnBhc3N3b3JkOwogICAgICB0aGlzLiRzdG9yZS5kaXNwYXRjaCgibG9naW4iLCB7IGVtYWlsSW5wdXQsIHBhc3N3b3JkSW5wdXQgfSkudGhlbigKICAgICAgICAKICAgICAgICAgICgpID0+IHsKICAgICAgICAgICAgICB0aGlzLiRyb3V0ZXIucHVzaCgnLycpCiAgICAgICAgICB9CiAgICAgICk7CiAgICB9CiAgfSwKfQo="},{"version":3,"sources":["Auth.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0CA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Auth.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <validation-observer\n    ref=\"observer\"\n  >\n    <form>\n      <validation-provider\n        v-slot=\"{ errors }\"\n        name=\"email\"\n        rules=\"required|email\"\n      >\n        <v-text-field\n          v-model=\"email\"\n          :error-messages=\"errors\"\n          label=\"E-mail\"\n          required\n        ></v-text-field>\n      </validation-provider>\n      <validation-provider\n        v-slot=\"{ errors }\"\n        name=\"Password\"\n        rules=\"required\"\n      >\n        <v-text-field\n          v-model=\"password\"\n          :error-messages=\"errors\"\n          type='password'\n          label=\"Password\"\n          required\n        ></v-text-field>\n      </validation-provider>\n      <br>\n      <v-btn\n        class=\"mr-4\"\n        @click=\"submit\"\n      >\n        valider\n      </v-btn>\n    </form>\n  </validation-observer>\n</template>\n\n<script>\n  import { required, email } from 'vee-validate/dist/rules'\n  import { extend, ValidationObserver, ValidationProvider, setInteractionMode } from 'vee-validate'\n\n  setInteractionMode('eager')\n\n  extend('required', {\n    ...required,\n    message: '{_field_} can not be empty',\n  })\n\n  extend('email', {\n    ...email,\n    message: 'Email must be valid',\n  })\n\n  export default {\n    components: {\n      ValidationProvider,\n      ValidationObserver,\n    },\n    data: () => ({\n      password: '',\n      email: '',\n      select: null,\n      errors: null,\n    }),\n\n    methods: {\n      submit () {\n        this.$refs.observer.validate();\n        const emailInput = this.email;\n        const passwordInput = this.password;\n        this.$store.dispatch(\"login\", { emailInput, passwordInput }).then(\n          \n            () => {\n                this.$router.push('/')\n            }\n        );\n      }\n    },\n  }\n</script>\n\n<style>\n\n</style>"]}]}